#!/sbin/openrc-run
# Copyright 1999-2015 Gentoo Foundation
# Distributed under the terms of the GNU General Public License v2
# $Header: /var/cvsroot/gentoo-x86/net-misc/openssh/files/sshd.rc6.4,v 1.5 2015/05/04 02:56:25 vapier Exp $

extra_commands="cronjob upgrade"
service_name="deluged"
description="Deluge Daemon"
description_start="Start ${service_name}"
description_stop="Stop ${service_name}"
description_upgrade="Upgrade ${service_name} if update is available"
description_cronjob="Re-start if service ${service_name} has crashed. Should be executed from cron job"

user_name="deluge"
user_group="media"

pkg_name="deluged"
pkg_arch="x86_64"
pkg_repo="http://nl.alpinelinux.org/alpine/edge/testing"

command_file="/usr/bin/deluged"
config_path="/config"
daemon_args=""

add_missing_path() {
    path="$1"
    uid_name="$2"
    gid_name="$3"
    if [ ! -z "${path}" ] && [ ! -d "${path}" ]; then
        mkdir -p "${path}"
        if [ ! -z "${uid_name}" ] && [ ! -z "${gid_name}" ]; then
            chown -R ${uid_name}:${gid_name} "${path}"
        fi
    fi
}

file_age() {
    file="$1"
    cur_time=$(($(date +%s)))
    file_time=$(($(date -r ${file} +%s)))
    file_age=$((${cur_time} - ${file_time}))
    echo "${file_age}"
}

is_running() {
    ret_val=0
    if [ -f "/var/run/${service_name}.pid" ]; then
        pid=$(cat "/var/run/${service_name}.pid")
        cmd_running=$(cat "/proc/${pid}/cmdline" | grep "${command_file}" | wc -l)
        if [ $cmd_running -ge 1 ]; then
            ret_val=1
        fi
    fi
    echo "${ret_val}"
}

validate_user() {

    uid_name="$1"
    gid_name="$2"
    
    if [ ! -z "${uid_name}" ] && [ ! -z "${gid_name}" ]; then

        if [ ! -z "${PUID}" ] && [ ! "$(id -u ${uid_name})" -eq "${PUID}" ]; then
            usermod -o -u "${PUID}" ${uid_name}
        fi

        if [ ! -z "${PGID}" ] && [ ! "$(id -g ${uid_name})" -eq "${PGID}" ]; then
            groupmod -o -g "${PGID}" ${gid_name}
        fi
        
        # Change ownerships
        chown -R ${uid_name}:${gid_name} /config
        chown ${uid_name}:${gid_name} /downloads
    fi
}

upgrade() {
    if [ ! -x "${command_file}" ]; then
        einfo "${pkg_name} is not installed or broken. Re-installing ${pkg_name}"
        apk --quiet --no-cache del ${pkg_name}
        apk --quiet --no-cache --repository "${pkg_repo}" add ${pkg_name}
    else
        touch "${config_path}/.upgrade_check2"
        updateAvail=$(apk --no-cache --repository "${pkg_repo}" version ${pkg_name} | grep ${pkg_name})
        if [ "$updateAvail" != "${updateAvail/</}" ]; then
            current_version=$(echo "${updateAvail}" | awk -F"<" '{print $1}' | sed "s/${pkg_name}-//g" | tr -d '[:space:]')
            remote_version=$(echo "${updateAvail}" | awk -F"<" '{print $2}' | tr -d '[:space:]')
            einfo "Upgrading ${pkg_name} from version ${current_version} to version ${remote_version}"
            started=$(is_running)
            if [ "${started}" = "1" ]; then
                /etc/init.d/deluge-web stop
                /etc/init.d/deluged stop
            fi
            apk --quiet --no-cache del ${pkg_name}
            apk --quiet --no-cache --repository "${pkg_repo}" add ${pkg_name}
            if [ "${started}" = "1" ]; then
                /etc/init.d/deluged start
                /etc/init.d/deluge-web start
            fi
        else
            einfo "No upgrade available at the moment for ${pkg_name}."
        fi
    fi
}

auto_upgrade() {
    	try_upgrade="0"
    	if [ ! -f "${config_path}/.upgrade_check2" ]; then
        	try_upgrade="1"
    	else
        	since_last_upgrade=$(($(file_age "${config_path}/.upgrade_check2")))
        	if [ $since_last_upgrade -ge 86400 ]; then
            		try_upgrade="1"
        	fi
    	fi
    	if [ "${try_upgrade}" = "1" ]; then
        	upgrade
    	fi
}

start() {

	ebegin "Starting ${service_name}"

	# Upgrade if possible
	auto_upgrade

	validate_user

	start-stop-daemon --background --start \
	    --exec "${command_file}" \
	    --user ${user_name}:${user_group} \
	    --make-pidfile --pidfile /var/run/${service_name}.pid \
	    -- -c "${config_path}" -d --loglevel=info -l "${config_path}/deluged.log" ${daemon_args}
	eend $?
}

stop() {
	ebegin "Stopping ${service_name}"
	
	start-stop-daemon --quiet --stop --exec "${command_file}" \
	    --retry=TERM/30/KILL/5 \
	    --pidfile /var/run/${service_name}.pid
	    
	eend $?
}
